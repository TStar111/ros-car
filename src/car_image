#!/home/mech/miniconda3/envs/ros_env/bin/python

# Note the specification of conda python

import time
import os, sys
import torch
import numpy as np
import cv2

import rospy
from rospy.exceptions import ROSSerializationException
from serial.serialutil import SerialException
# from cv_bridge import CvBridge

from maestro.servo import Servo
from car.msg import Event, Status, ServoStatus
from sensor_msgs.msg import Image
from std_msgs.msg import String

from YOLOP.detect import detect
from YOLOP.lib.models import get_net
from YOLOP.lib.config import cfg

from cv_bridge.cv_bridge import imgmsg_to_cv2


def get_status(servo):
    status = ServoStatus()
    status.position = servo.get_position()
    status.target = servo.target["current"]
    status.acceleration = servo.acceleration

    status.input_rom = servo.rom["input"]
    status.max_rom = servo.rom["max"]
    status.current_rom = servo.rom["current"]
    status.rom_delta = servo.rom["delta"]

    return status


def image_input(image):

    # Processing the image to something that can be passed into a model
    # No longer using cv_bridge because of incompatability with python3
    # cv_image = bridge.imgmsg_to_cv2(image)
    
    # This will return an rgb image
    cv_image = imgmsg_to_cv2(image)

    # det is a tensor object. 2 dimension, rows represent each detection
     # The output looks to be coordinates of upper left and bottom right, confidence, class
    det, da_seg_mask, ll_seg_mask = detect(model, cv_image, device, IMG_SIZE, CONF_THRES, IOU_THRES)

    print(det)
    # TODO: Test the output to see if it works

def file_input(string):
    # Testing to see if the model works with default images
    # Note that this will not be used at runtime and should probably be commented out

    # Read the input image
    cv_image = cv2.imread(string.data)

    # TODO: Lowkey I don't think this is necessary?
    # Convert from BGR --> RGB
    # cv_image = cv_image[...,::-1]
    
    # Run inference
    det, da_seg_mask, ll_seg_mask = detect(model, cv_image, device, IMG_SIZE, CONF_THRES, IOU_THRES)

    # See output
    print(det)

def main():

    print()
    print("CAR SETTINGS")
    print("--------------------------------")
    print(f"FPS:                {FPS}")
    print(f"INPUT ROM:          {INPUT_ROM}")
    print(f"SERVO ROM:          {SERVO_ROM}")
    print(f"ACCELERATION DELTA: {ACCELERATION_DELTA}")
    print(f"SROM DELTA:         {SROM_DELTA}")
    print()
    print("DEAD MAN'S SWITCH:  {}".format("ON" if ENABLE_DMS else "OFF"))
    print()

    rate = rospy.Rate(FPS)
    while not rospy.is_shutdown():
        try:
            status = Status()
            status.throttle = get_status(throttle)
            status.steer = get_status(steer)
            status_publisher.publish(status)
            # throttle_publisher.publish(get_status(throttle))
            # steer_publisher.publish(get_status(steer))
            rate.sleep()
        except SerialException:
            pass
        except ROSSerializationException:
            pass
    # vid_path, vid_writer = None, None
if __name__ == '__main__':
    rospy.init_node('car')
    rospy.Subscriber("/rgb/image_raw", Image, image_input, queue_size=1)
    rospy.Subscriber("/test", String, file_input, queue_size=1)

    status_publisher = rospy.Publisher('/car/status', Status, queue_size=1)

    FPS = rospy.get_param('~FPS', 30)
    INPUT_ROM = rospy.get_param('~INPUT_ROM', [0, 1000])
    SERVO_ROM = rospy.get_param('~SERVO_ROM', [4000, 8000])
    ACCELERATION_DELTA = rospy.get_param('~ACCELERATION_DELTA', 1)
    SROM_DELTA = rospy.get_param('~SROM_DELTA', 0.025)
    ENABLE_DMS = rospy.get_param('~ENABLE_DMS', False) # Modified
    WEIGHTS = rospy.get_param('~WEIGHTS', '/home/mech/catkin_ws/src/car/src/YOLOP/weights/End-to-end.pth')
    IMG_SIZE = rospy.get_param('~IMG_SIZE', 640)
    CONF_THRES = rospy.get_param('~CONF_THRES', 0.25)
    IOU_THRES = rospy.get_param('~IOU_THRES', 0.45)

    # Eliminating CvBridge because it doesn't play nice with python3
    # bridge = CvBridge()

    # TODO: I don't really know why I did this, I just needed a device object
    device = torch.device('cpu')
    half = False

    # Load model
    model = get_net(cfg)
    checkpoint = torch.load(WEIGHTS, map_location= device)
    model.load_state_dict(checkpoint['state_dict'])
    model = model.to(device)
    if half:
        model.half()  # to FP16

    img = torch.zeros((1, 3, IMG_SIZE, IMG_SIZE), device=device)  # init img
    _ = model(img.half() if half else img) if device != 'cpu' else None  # run once
    model.eval()

    throttle = Servo(channel=1, irom=INPUT_ROM, srom=SERVO_ROM)
    # throttle.set_srom(delta=.25)
    throttle.set_acceleration(256) # max

    steer = Servo(channel=0, irom=INPUT_ROM, srom=SERVO_ROM)
    steer.set_acceleration(256) # max

    disabled = ENABLE_DMS

    throttle.set_target(500)
    steer.set_target(500)
    main()

# Throttle needs about 620 to start going but then can be reduced to 590 for cruising