#!/home/mech/miniconda3/envs/ros_env/bin/python

# Note the specification of conda python

import time

import rospy
from rospy.exceptions import ROSSerializationException
from serial.serialutil import SerialException

from maestro.servo import Servo
from car.msg import Event, Status, ServoStatus


def main():

    print("Running")

    steer.set_target(100)

    print("Left")
    print(steer.target["input"])
    print(steer.target["current"])

    time.sleep(2.0)

    steer.set_target(900)

    print("Right")
    print(steer.target["input"])
    print(steer.target["current"])

    time.sleep(2.0)

    steer.set_target(500)

    print(steer.target["current"])

    print("Straight")
    print(steer.target["input"])
    print(steer.target["current"])

    time.sleep(1.0)

    # throttle.set_target(620)
    # time.sleep(1.0)
    # throttle.set_target(590)

    # time.sleep(2.0)

    # throttle.set_target(500)


if __name__ == '__main__':
    rospy.init_node('car')

    status_publisher = rospy.Publisher('/car/status', Status, queue_size=1)
    # throttle_publisher = rospy.Publisher('/car/throttle', ServoStatus, queue_size=1)
    # steer_publisher = rospy.Publisher('/car/steer', ServoStatus, queue_size=1)

    # Input ROM and Servo ROM. These can be tuned based on what your servo's take
    # and what you expect your input to be. For reference, I used keyboard input.
    INPUT_ROM = rospy.get_param('~INPUT_ROM', [0, 1000])
    SERVO_ROM = rospy.get_param('~SERVO_ROM', [4000, 8000])

    steer = Servo(channel=0, irom=INPUT_ROM, srom=SERVO_ROM)
    steer.set_acceleration(256) # max

    throttle = Servo(channel=1, irom=INPUT_ROM, srom=SERVO_ROM) # Check the setup
    throttle.set_acceleration(256) # max

    main()

